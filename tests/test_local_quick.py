"""
Quick Local Operations Test
Tests local directory operations without requiring FTP server
"""

import sys
import os
import tempfile
import shutil

# Add paths
current_dir = os.path.dirname(os.path.abspath(__file__))
client_dir = os.path.join(current_dir, '..', 'Client')
sys.path.insert(0, client_dir)

from ftp_command import FTPCommands

def test_local_operations():
    """Test local directory operations"""
    print("üß™ QUICK LOCAL OPERATIONS TEST")
    print("=" * 50)
    
    results = []
    
    # Test 1: FTP Client Creation
    try:
        ftp_client = FTPCommands()
        results.append("‚úÖ FTP Client Creation: PASSED")
        print("‚úÖ FTP Client Creation: PASSED")
    except Exception as e:
        results.append(f"‚ùå FTP Client Creation: FAILED - {e}")
        print(f"‚ùå FTP Client Creation: FAILED - {e}")
        return results
    
    # Test 2: Get Current Local Directory
    try:
        original_dir = os.getcwd()
        print(f"üìÇ Current directory: {original_dir}")
        results.append(f"‚úÖ Current Directory Check: PASSED - {original_dir}")
        print(f"‚úÖ Current Directory Check: PASSED")
    except Exception as e:
        results.append(f"‚ùå Current Directory Check: FAILED - {e}")
        print(f"‚ùå Current Directory Check: FAILED - {e}")
        return results
    
    # Test 3: Create Temporary Directory for Testing
    try:
        temp_dir = tempfile.mkdtemp(prefix='ftp_test_lcd_')
        print(f"üìÅ Created temp directory: {temp_dir}")
        results.append(f"‚úÖ Temp Directory Creation: PASSED - {temp_dir}")
        print(f"‚úÖ Temp Directory Creation: PASSED")
    except Exception as e:
        results.append(f"‚ùå Temp Directory Creation: FAILED - {e}")
        print(f"‚ùå Temp Directory Creation: FAILED - {e}")
        return results
    
    # Test 4: LCD Command - Change to Temp Directory
    try:
        print(f"üîÑ Testing LCD to: {temp_dir}")
        ftp_client.do_lcd(temp_dir)
        
        # Verify the change
        new_dir = os.getcwd()
        if new_dir == temp_dir:
            results.append("‚úÖ LCD Command: PASSED - Successfully changed directory")
            print("‚úÖ LCD Command: PASSED - Successfully changed directory")
        else:
            results.append(f"‚ùå LCD Command: FAILED - Expected {temp_dir}, got {new_dir}")
            print(f"‚ùå LCD Command: FAILED - Expected {temp_dir}, got {new_dir}")
    except Exception as e:
        results.append(f"‚ùå LCD Command: FAILED - {e}")
        print(f"‚ùå LCD Command: FAILED - {e}")
    
    # Test 5: LCD with Relative Path (..)
    try:
        parent_dir = os.path.dirname(temp_dir)
        print(f"üîÑ Testing LCD with relative path: ..")
        ftp_client.do_lcd("..")
        
        new_dir = os.getcwd()
        if new_dir == parent_dir:
            results.append("‚úÖ LCD Relative Path: PASSED - .. navigation works")
            print("‚úÖ LCD Relative Path: PASSED - .. navigation works")
        else:
            results.append(f"‚ö†Ô∏è LCD Relative Path: Unexpected result - Expected {parent_dir}, got {new_dir}")
            print(f"‚ö†Ô∏è LCD Relative Path: Unexpected result")
    except Exception as e:
        results.append(f"‚ùå LCD Relative Path: FAILED - {e}")
        print(f"‚ùå LCD Relative Path: FAILED - {e}")
    
    # Test 6: LCD with Non-existent Directory
    try:
        fake_dir = os.path.join(temp_dir, "non_existent_dir_12345")
        print(f"üîÑ Testing LCD with non-existent directory: {fake_dir}")
        
        before_dir = os.getcwd()
        ftp_client.do_lcd(fake_dir)
        after_dir = os.getcwd()
        
        if before_dir == after_dir:
            results.append("‚úÖ LCD Error Handling: PASSED - Stayed in same directory for invalid path")
            print("‚úÖ LCD Error Handling: PASSED - Properly handled invalid directory")
        else:
            results.append("‚ö†Ô∏è LCD Error Handling: Directory changed unexpectedly")
            print("‚ö†Ô∏è LCD Error Handling: Directory changed unexpectedly")
    except Exception as e:
        results.append(f"‚úÖ LCD Error Handling: PASSED - Exception caught: {e}")
        print(f"‚úÖ LCD Error Handling: PASSED - Exception properly caught")
    
    # Test 7: LCD with Empty Argument (should show current directory)
    try:
        print(f"üîÑ Testing LCD with no arguments")
        current_before = os.getcwd()
        ftp_client.do_lcd("")  # Empty argument
        current_after = os.getcwd()
        
        if current_before == current_after:
            results.append("‚úÖ LCD Empty Argument: PASSED - Directory unchanged")
            print("‚úÖ LCD Empty Argument: PASSED - Directory unchanged with empty argument")
        else:
            results.append("‚ö†Ô∏è LCD Empty Argument: Directory changed unexpectedly")
            print("‚ö†Ô∏è LCD Empty Argument: Directory changed unexpectedly")
    except Exception as e:
        results.append(f"‚ö†Ô∏è LCD Empty Argument: Exception - {e}")
        print(f"‚ö†Ô∏è LCD Empty Argument: Exception - {e}")
    
    # Test 8: Return to Original Directory
    try:
        print(f"üîÑ Returning to original directory: {original_dir}")
        ftp_client.do_lcd(original_dir)
        
        final_dir = os.getcwd()
        if final_dir == original_dir:
            results.append("‚úÖ Return to Original: PASSED")
            print("‚úÖ Return to Original: PASSED")
        else:
            results.append(f"‚ùå Return to Original: FAILED - In {final_dir}")
            print(f"‚ùå Return to Original: FAILED")
    except Exception as e:
        results.append(f"‚ùå Return to Original: FAILED - {e}")
        print(f"‚ùå Return to Original: FAILED - {e}")
    
    # Cleanup
    try:
        if os.path.exists(temp_dir):
            os.rmdir(temp_dir)
        results.append("‚úÖ Cleanup: PASSED")
        print("‚úÖ Cleanup: PASSED")
    except Exception as e:
        results.append(f"‚ö†Ô∏è Cleanup: Warning - {e}")
        print(f"‚ö†Ô∏è Cleanup: Warning - {e}")
    
    return results

def main():
    """Main function"""
    print("üöÄ Quick Local Operations Test")
    print("This test checks LCD (local change directory) functionality")
    print()
    
    results = test_local_operations()
    
    # Summary
    print("\n" + "=" * 50)
    print("üìä TEST SUMMARY:")
    
    passed = len([r for r in results if "PASSED" in r])
    failed = len([r for r in results if "FAILED" in r])
    warnings = len([r for r in results if "WARNING" in r or "‚ö†Ô∏è" in r])
    
    print(f"‚úÖ Passed: {passed}")
    print(f"‚ùå Failed: {failed}")
    print(f"‚ö†Ô∏è Warnings: {warnings}")
    
    if failed == 0:
        print("\nüéâ All local operations functionality is working!")
    elif failed <= 1:
        print("\nüòä Local operations mostly working with minor issues!")
    
    print("\nüìã What was tested:")
    for result in results:
        print(f"  {result}")
    
    print("\nüí° LCD Command Tests:")
    print("  - Basic directory change")
    print("  - Relative path navigation (..)")
    print("  - Error handling for invalid paths")
    print("  - Empty argument handling")
    print("  - Return to original directory")

if __name__ == "__main__":
    main()
